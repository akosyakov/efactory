/*******************************************************************************
 * Copyright (c) 2009 Sebastian Benz.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Sebastian Benz - initial API and implementation
 ******************************************************************************/
/*
 * generated by Xtext
 */
package com.googlecode.efactory.scoping;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;

import com.google.inject.Inject;
import com.googlecode.efactory.eFactory.CustomNameMapping;
import com.googlecode.efactory.eFactory.EnumAttribute;
import com.googlecode.efactory.eFactory.Factory;
import com.googlecode.efactory.eFactory.Feature;
import com.googlecode.efactory.eFactory.NewObject;
import com.googlecode.efactory.eFactory.PackageImport;
import com.googlecode.efactory.eFactory.Reference;
import com.googlecode.efactory.util.EcoreUtil3;

/**
 * This class contains custom scoping description.
 * 
 * see : http://wiki.eclipse.org/Xtext/Documentation#Scoping on how and when to
 * use it
 * 
 */
public class EFactoryScopeProvider extends AbstractDeclarativeScopeProvider {

	@Inject
	private EReferenceScopeProvider eReferenceScopeProvider;

	@Inject
	private EPackageScopeProvider ePackageScopeProvider;

	public IScope scope_PackageImport_ePackage(PackageImport packageImport, EReference eReference) {
		return ePackageScopeProvider.createEPackageScope(packageImport.eResource());
	}
	
	public IScope scope_NewObject_eClass(Factory factory, EReference eReference) {
		return ePackageScopeProvider.createEClassScope(factory.eResource());
	}

	public IScope scope_EnumAttribute_value(EnumAttribute attribute,
			EReference reference) {
		Feature feature = (Feature) attribute.eContainer();
		if (feature.getEFeature().getEType() instanceof EEnum) {
			EEnum enumType = (EEnum) feature.getEFeature().getEType();
			Iterable<IEObjectDescription> elements = Scopes
					.scopedElementsFor(enumType.getELiterals());
			return new SimpleScope(elements);
		}
		return IScope.NULLSCOPE;
	}

	public IScope scope_NewObject_eClass(Feature feature, EReference eReference) {
		return ePackageScopeProvider.createEClassScope(feature.eResource(),
				(EClass) feature.getEFeature().getEType());
	}

	public IScope scope_Feature_eFeature(Feature feature, EReference reference) {
		NewObject newObject = (NewObject) feature.eContainer();
		EClass eClass = newObject.getEClass();
		Iterable<? extends EObject> assignableFeature = EcoreUtil3
				.getAssignableFeatures(eClass);
		return new SimpleScope(Scopes.scopedElementsFor(assignableFeature));
	}

	public IScope scope_Feature_reference(NewObject newObject) {
		if (newObject.getEClass() == null) {
			return IScope.NULLSCOPE;
		}

		return new SimpleScope(Scopes.scopedElementsFor(newObject.getEClass()
				.getEAllStructuralFeatures()));
	}

	public IScope scope_NewObject_eClass(Reference reference,
			EReference eReference) {
		return IScope.NULLSCOPE;
	}

	public IScope scope_Reference_value(Feature feature, EReference eReference) {
		EStructuralFeature sourceFeature = feature.getEFeature();
		if (EcoreUtil3.isEReference(sourceFeature)) {
			return eReferenceScopeProvider.get(feature.eResource(),
					(EClass) sourceFeature.getEType());

		}
		return IScope.NULLSCOPE;
	}

	public IScope scope_CustomNameMapping_nameFeature(
			CustomNameMapping mapping, EReference reference) {
		Iterable<EAttribute> attributes = EcoreUtil3.getAllAttributes(
				mapping.getEClass(), String.class);
		Iterable<IEObjectDescription> elements = Scopes
				.scopedElementsFor(attributes);
		return new SimpleScope(elements);
	}

	public IScope scope_CustomNameMapping_eClass(EObject context,
			EReference reference) {
		return ePackageScopeProvider.createEClassScope(context.eResource());
	}

	public IScope scope_Containment_value(Feature feature, EReference eReference) {
		if (EcoreUtil3.isEContainment(feature.getEFeature())) {
			return super.getDelegate().getScope(feature, eReference);
		}
		return IScope.NULLSCOPE;
	}

}
