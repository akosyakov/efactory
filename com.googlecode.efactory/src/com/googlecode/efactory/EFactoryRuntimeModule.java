/*******************************************************************************
 * Copyright (c) 2009 Sebastian Benz.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Sebastian Benz - initial API and implementation
 ******************************************************************************/
/*
 * generated by Xtext
 */
package com.googlecode.efactory;

import java.text.SimpleDateFormat;

import org.eclipse.xtext.parser.antlr.IReferableElementsUnloader;
import org.eclipse.xtext.parser.antlr.IReferableElementsUnloader.GenericUnloader;
import org.eclipse.xtext.parsetree.reconstr.ITransientValueService;
import org.eclipse.xtext.resource.IResourceFactory;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import com.google.inject.Binder;
import com.google.inject.name.Names;
import com.googlecode.efactory.conversion.DATEValueConverter;
import com.googlecode.efactory.conversion.TerminalConverters;
import com.googlecode.efactory.resource.EFactoryStandaloneResourceFactory;
import com.googlecode.efactory.scoping.EFactoryImportedNamespaceAwareScopeProvider;
import com.googlecode.efactory.serialization.EFactoryTransientValueService;

/**
 * Use this class to register components to be used within the IDE.
 */
public class EFactoryRuntimeModule
		extends
			com.googlecode.efactory.AbstractEFactoryRuntimeModule {

	@Override
	public void configure(Binder binder) {
		super.configure(binder);
		binder.bind(SimpleDateFormat.class)
				.annotatedWith(Names.named(DATEValueConverter.DATE_FORMAT_KEY))
				.toInstance(new SimpleDateFormat("MM.dd.yyyy"));
		binder.bind(IReferableElementsUnloader.class).to(GenericUnloader.class);
	}
	@Override
	public Class<? extends org.eclipse.xtext.conversion.IValueConverterService> bindIValueConverterService() {
		return TerminalConverters.class;
	}

	@Override
	public Class<? extends IResourceFactory> bindIResourceFactory() {
		return EFactoryStandaloneResourceFactory.class;
	}

	@Override
	public Class<? extends ITransientValueService> bindITransientValueService() {
		return EFactoryTransientValueService.class;
	}
	
	@Override
	public void configureIScopeProviderDelegate(com.google.inject.Binder binder) {
		binder.bind(org.eclipse.xtext.scoping.IScopeProvider.class).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(
				EFactoryImportedNamespaceAwareScopeProvider.class);
	}

}
